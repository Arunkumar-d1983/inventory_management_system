package com.inventory.entity;

import java.math.BigDecimal;
import javax.persistence.*;
import javax.validation.constraints.*;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * Represents a product entity in the inventory system.
 * 
 * This class defines the essential fields for product information, including:
 * - Unique ID (auto-generated)
 * - Product name
 * - SKU (Stock Keeping Unit)
 * - Price (must be non-negative)
 * - Stock quantity (must be non-negative)
 * - Version (for optimistic locking)
 * 
 * Validation constraints ensure integrity and consistency of the data.
 * 
 * Lombok annotations
 * (@Data, @Getter, @Setter, @NoArgsConstructor, @AllArgsConstructor)
 * are used to generate boilerplate code like getters, setters, constructors,
 * equals/hashCode, and toString automatically.
 */
@JsonIgnoreProperties({ "hibernateLazyInitializer", "handler" })
@Entity
@Data
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Table(name = "products")
public class Product {
    /**
     * Unique identifier for the product.
     * 
     * This field is the primary key and is auto-generated by the database.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /**
     * Name of the product.
     * 
     * This field is mandatory and cannot be null.
     */
    @Column(nullable = false)
    private String name;

    /**
     * Stock Keeping Unit (SKU) for the product.
     * 
     * This is a unique identifier per product and cannot be null.
     */
    @Column(unique = true, nullable = false)
    private String sku;

    /**
     * Price of the product.
     * 
     * Must be greater than or equal to 0.0.
     */
    @DecimalMin(value = "0.0", inclusive = true, message = "Price must be non-negative.")
    private BigDecimal price;

    /**
     * Available stock for the product.
     * 
     * Must be a non-negative integer.
     */
    @Min(value = 0, message = "Stock must be zero or a positive integer.")
    private Integer stock;

    /**
     * Version field for optimistic locking.
     *
     * This version number is automatically managed by JPA and used to detect
     * conflicting concurrent updates. If two transactions try to update the same
     * product simultaneously, the one with a stale version will fail with an
     * OptimisticLockingFailureException.
     */
    @Version
    private Integer version;

}
