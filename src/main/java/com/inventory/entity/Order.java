package com.inventory.entity;

import java.time.LocalDateTime;
import java.util.*;
import javax.persistence.*;
import com.fasterxml.jackson.annotation.JsonManagedReference;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * Represents a customer order entity in the system.
 * 
 * This class holds information about an order such as its unique ID, the date
 * it was placed, its current status, and the list of items associated with it.
 * 
 * It uses JPA annotations to map the entity to the 'orders' table in the
 * database.
 * Lombok annotations are used to reduce boilerplate for constructors, getters,
 * setters, and logging.
 */
@Entity
@Data
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Table(name = "orders")
public class Order {

    /**
     * Unique identifier for the order.
     * It is auto-generated by the database.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /**
     * Timestamp indicating when the order was placed.
     */
    private LocalDateTime orderDate;

    /**
     * Current status of the order.
     * Stored as a string representation of the enum.
     */
    @Enumerated(EnumType.STRING)
    private OrderStatus status;

    /**
     * List of items associated with this order.
     * 
     * The relationship is bidirectional and mapped by the "order" field in
     * the OrderItem entity. CascadeType.ALL ensures that any changes to
     * the order will also cascade to the order items.
     */

    @OneToMany(mappedBy = "order", cascade = CascadeType.ALL, orphanRemoval = true)
    @JsonManagedReference
    private List<OrderItem> items = new ArrayList<>();
}
